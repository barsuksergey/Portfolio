{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predicting Property Maintenance Fines\n",
    "\n",
    "* [Building Permits](https://data.detroitmi.gov/Property-Parcels/Building-Permits/xw2a-a7tf)\n",
    "* [Trades Permits](https://data.detroitmi.gov/Property-Parcels/Trades-Permits/635b-dsgv)\n",
    "* [Improve Detroit: Submitted Issues](https://data.detroitmi.gov/Government/Improve-Detroit-Submitted-Issues/fwz3-w3yn)\n",
    "* [DPD: Citizen Complaints](https://data.detroitmi.gov/Public-Safety/DPD-Citizen-Complaints-2016/kahe-efs3)\n",
    "* [Parcel Map](https://data.detroitmi.gov/Property-Parcels/Parcel-Map/fxkw-udwf)\n",
    "\n",
    "___\n",
    "\n",
    "Each row in train.csv and test.csv corresponds to a single blight ticket, and includes information about when, why, and to whom each ticket was issued. The target variable is compliance, which is True if the ticket was paid early, on time, or within one month of the hearing data, False if the ticket was paid after the hearing date or not at all, and Null if the violator was found not responsible. Compliance, as well as a handful of other variables that will not be available at test-time, are only included in train.csv.\n",
    "\n",
    "<br>\n",
    "\n",
    "**File descriptions** (Use only this data for training your model!)\n",
    "\n",
    "    train.csv - the training set (all tickets issued 2004-2011)\n",
    "    test.csv - the test set (all tickets issued 2012-2016)\n",
    "    addresses.csv & latlons.csv - mapping from ticket id to addresses, and from addresses to lat/lon coordinates. \n",
    "     Note: misspelled addresses may be incorrectly geolocated.\n",
    "\n",
    "<br>\n",
    "\n",
    "**Data fields**\n",
    "\n",
    "train.csv & test.csv\n",
    "\n",
    "    ticket_id - unique identifier for tickets\n",
    "    agency_name - Agency that issued the ticket\n",
    "    inspector_name - Name of inspector that issued the ticket\n",
    "    violator_name - Name of the person/organization that the ticket was issued to\n",
    "    violation_street_number, violation_street_name, violation_zip_code - Address where the violation occurred\n",
    "    mailing_address_str_number, mailing_address_str_name, city, state, zip_code, non_us_str_code, country - Mailing address of the violator\n",
    "    ticket_issued_date - Date and time the ticket was issued\n",
    "    hearing_date - Date and time the violator's hearing was scheduled\n",
    "    violation_code, violation_description - Type of violation\n",
    "    disposition - Judgment and judgement type\n",
    "    fine_amount - Violation fine amount, excluding fees\n",
    "    admin_fee - $20 fee assigned to responsible judgments\n",
    "state_fee - $10 fee assigned to responsible judgments\n",
    "    late_fee - 10% fee assigned to responsible judgments\n",
    "    discount_amount - discount applied, if any\n",
    "    clean_up_cost - DPW clean-up or graffiti removal cost\n",
    "    judgment_amount - Sum of all fines and fees\n",
    "    grafitti_status - Flag for graffiti violations\n",
    "    \n",
    "train.csv only\n",
    "\n",
    "    payment_amount - Amount paid, if any\n",
    "    payment_date - Date payment was made, if it was received\n",
    "    payment_status - Current payment status as of Feb 1 2017\n",
    "    balance_due - Fines and fees still owed\n",
    "    collection_status - Flag for payments in collections\n",
    "    compliance [target variable for prediction] \n",
    "     Null = Not responsible\n",
    "     0 = Responsible, non-compliant\n",
    "     1 = Responsible, compliant\n",
    "    compliance_detail - More information on why each ticket was marked compliant or non-compliant\n",
    "\n",
    "\n",
    "___\n",
    "\n",
    "## Goal\n",
    "\n",
    "Predictions will be given as the probability that the corresponding blight ticket will be paid on time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ticket_id\n",
       "284932    0.2\n",
       "285362    0.0\n",
       "285361    0.3\n",
       "285338    0.0\n",
       "285346    0.3\n",
       "285345    0.5\n",
       "285347    0.4\n",
       "285342    0.5\n",
       "285530    0.6\n",
       "284989    0.0\n",
       "285344    0.4\n",
       "285343    0.0\n",
       "285340    0.6\n",
       "285341    0.4\n",
       "285349    0.0\n",
       "285348    0.5\n",
       "284991    0.3\n",
       "285532    0.3\n",
       "285406    0.3\n",
       "285001    0.3\n",
       "285006    0.6\n",
       "285405    0.6\n",
       "285337    0.3\n",
       "285496    0.4\n",
       "285497    0.5\n",
       "285378    0.0\n",
       "285589    0.3\n",
       "285585    0.5\n",
       "285501    0.3\n",
       "285581    0.6\n",
       "         ... \n",
       "376367    0.0\n",
       "376366    0.4\n",
       "376362    0.4\n",
       "376363    0.5\n",
       "376365    0.3\n",
       "376364    0.4\n",
       "376228    0.6\n",
       "376265    0.0\n",
       "376286    0.4\n",
       "376320    0.0\n",
       "376314    0.0\n",
       "376327    0.7\n",
       "376385    0.7\n",
       "376435    0.6\n",
       "376370    0.7\n",
       "376434    0.1\n",
       "376459    0.0\n",
       "376478    0.4\n",
       "376473    0.1\n",
       "376484    0.3\n",
       "376482    0.3\n",
       "376480    0.3\n",
       "376479    0.3\n",
       "376481    0.0\n",
       "376483    0.4\n",
       "376496    0.6\n",
       "376497    0.0\n",
       "376499    0.0\n",
       "376500    0.0\n",
       "369851    0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "def blight_model():\n",
    "    \n",
    "    data = pd.read_csv('train.csv', encoding = 'latin1', low_memory = False).set_index('ticket_id')\n",
    "    data['fine_amount'] = data['fine_amount'].fillna(data['fine_amount'].mean())\n",
    "    data['compliance'] = data['compliance'].fillna(False)\n",
    "    \n",
    "    address = pd.read_csv('addresses.csv', encoding = 'latin1').sort_values('address')\n",
    "    latlon = pd.read_csv('latlons.csv', encoding = 'latin1').sort_values('address')\n",
    "    address = address.drop_duplicates(subset=['address'])\n",
    "    loc = address.merge(latlon).set_index('ticket_id')\n",
    "    loc['number'] = loc['address'].str.split(n=1).str[0].astype('int64') > 0\n",
    "    loc = loc[loc['number'] == True].drop('number', axis = 1)\n",
    "    \n",
    "    data = data.dropna(axis=1)\n",
    "    data = data.join(loc, how = 'left').dropna(axis=0)\n",
    "    features = list(data.dtypes[data.dtypes != object].reset_index().iloc[:,0])\n",
    "    features = features[1:7] + features[10:]\n",
    "    \n",
    "    X_train = data[features].drop(['compliance'], axis = 1)\n",
    "    y_train = data['compliance']\n",
    "    \n",
    "    X_test = pd.read_csv('test.csv', encoding = 'latin1').set_index('ticket_id')\n",
    "    X_test = X_test.join(loc, how = 'left')\n",
    "    \n",
    "    test_features = features[0:6] + features[7:]\n",
    "    X_test = X_test[test_features].fillna(0)\n",
    "\n",
    "    #X_train, X_test, y_train, y_test = train_test_split(X_, y_, random_state=0)\n",
    "    \n",
    "    scaler = MinMaxScaler()\n",
    "    X_train_scaled = scaler.fit_transform(X_train)\n",
    "    X_test_scaled = scaler.transform(X_test)\n",
    "    lrRidge = Ridge().fit(X_train, y_train)\n",
    "    \n",
    "    clf = GradientBoostingClassifier(learning_rate = 0.01).fit(X_train, y_train)\n",
    "#     clf = LogisticRegression(C=100).fit(X_train, y_train)\n",
    "#     clf = SVC(kernel = 'linear', C=100).fit(X_train, y_train)\n",
    "    y_prob = clf.predict_proba(X_test)\n",
    "    \n",
    "    answer = pd.Series(data = y_prob[:,1], index = X_test.index)\n",
    "    \n",
    "    return answer #roc_auc_score(y_test, y_prob[:,1]) #Your answer here\n",
    "blight_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(61001,)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "blight_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "python-machine-learning",
   "graded_item_id": "nNS8l",
   "launcher_item_id": "yWWk7",
   "part_id": "w8BSS"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
